{"mappings":"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","sources":["<anon>","src/js/controller.js","src/js/model.js","src/js/views/findTotal.js","src/js/views/View.js","src/js/views/percentageOfNumber.js","src/js/views/whatPercentage.js"],"sourcesContent":["let $0f1d4402dffacf5b$export$ca000e230c0caa3e = {};\nconst $0f1d4402dffacf5b$export$f6196a6c6bb539b4 = function() {\n    const storedState = JSON.parse(localStorage.getItem(\"calculations\"));\n    const emptyState = {\n        calculations: {\n            percentageOfNumber: {\n                num1: null,\n                num2: null,\n                result: null\n            },\n            whatPercentage: {\n                num1: null,\n                num2: null,\n                result: null\n            },\n            findTotal: {\n                num1: null,\n                num2: null,\n                result: null\n            }\n        }\n    };\n    return storedState ? $0f1d4402dffacf5b$export$ca000e230c0caa3e = {\n        calculations: storedState\n    } : $0f1d4402dffacf5b$export$ca000e230c0caa3e = emptyState;\n};\n$0f1d4402dffacf5b$export$f6196a6c6bb539b4();\nconst $0f1d4402dffacf5b$export$4971331372cec95a = function(num1, num2, calculationType, result) {\n    $0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations[calculationType] = {\n        num1: num1,\n        num2: num2,\n        result: result\n    };\n    $0f1d4402dffacf5b$export$13d81116e45f7d80();\n};\nconst $0f1d4402dffacf5b$export$13d81116e45f7d80 = function() {\n    return localStorage.setItem(\"calculations\", JSON.stringify($0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations));\n};\n\n\nclass $3a07c34e115c11c9$export$2e2bcd8739ae039 {\n    _data;\n    render(data) {\n        const markup = this._generateMarkup(data);\n        this._initValidation && this._initValidation();\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    updateUI(data) {\n        if (!data) return;\n        // Update the data property in the instance with the new data\n        this._data = data;\n        // Generate new HTML markup based on the updated data\n        const newMarkup = this._generateMarkup();\n        /**\r\n     * Create a new Document Fragment from the new HTML markup\r\n     *  createRange(): This is a method of the document object. It creates a new Range object. Ranges are used in the DOM to represent a portion of a document, often used for selecting and manipulating parts of the DOM.\r\n     *  createContextualFragment(newMarkup): This method is called on the Range object. It takes a string of HTML markup (newMarkup) as its argument and creates a new DOM fragment from it.\r\n     *  newMarkup is the HTML markup that you've generated based on your updated data.\r\n     *  createContextualFragment parses this HTML markup and creates a new Document Fragment containing the elements and structure defined in the markup.\r\n     */ const newDOM = document.createRange().createContextualFragment(newMarkup);\n        // Convert the elements within the new DOM fragment into an array\n        const newElements = Array.from(newDOM.querySelector(`.calculation-form[data-type=\"${this.calculationType}\"]`).querySelectorAll(\"*\"));\n        // Convert the elements within the parent element into an array\n        const curElements = Array.from(document.querySelector(`.calculation-form[data-type=\"${this.calculationType}\"]`).querySelectorAll(\"*\"));\n        // Iterate through the elements in both the new DOM fragment and the parent element\n        newElements.forEach((newEl, i)=>{\n            const curEl = curElements[i];\n            // Check if the new element is different from the current element\n            if (!newEl.isEqualNode(curEl)) // Iterate through the attributes of the new element and update the corresponding attributes of the current element\n            Array.from(newEl.attributes).forEach((attr)=>{\n                curEl.setAttribute(attr.name, attr.value);\n            });\n        });\n    }\n    validateOnChange(...inputs) {\n        inputs.forEach((input)=>input.addEventListener(\"input\", ()=>{\n                this.isInvalidValue(input.value) ? input.setCustomValidity(\"Insert a valid value\") : input.setCustomValidity(\"\");\n            }));\n    }\n    isInvalidValue(value) {\n        return !value || isNaN(+value) || +value >= 9999999999999999n;\n    }\n}\n\n\nclass $ef2908d7ab5fa276$var$FindTotal extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".calculators\");\n    calculationType = \"findTotal\";\n    addHandlerCalculate(handler) {\n        const formContainer = this._parentElement.querySelector(`.calculation-form[data-type^=\"${this.calculationType}\"]`);\n        if (!formContainer) return;\n        const partInput = formContainer.querySelector(\"#part\");\n        const percentageInput = formContainer.querySelector(\"#percentage\");\n        this.validateOnChange(partInput, percentageInput);\n        formContainer.addEventListener(\"submit\", (e)=>{\n            e.preventDefault();\n            handler({\n                part: +partInput.value,\n                percentage: +percentageInput.value\n            }, this);\n        });\n    }\n    _generateMarkup() {\n        return `\r\n    <div class=\"calculation-form\" data-type=\"${this.calculationType}\">\r\n      <form>\r\n        <div class=\"inputs\">\r\n          <label>If</label>\r\n          <input type=\"text\" id=\"part\" value=\"${this._data?.num1 ?? \"\"}\" required autocomplete=\"off\" />\r\n          <label>is</label>\r\n          <input type=\"text\" id=\"percentage\" value=\"${this._data?.num2 ?? \"\"}\" required autocomplete=\"off\" />\r\n          <label>% of the total. The total is:</label>\r\n        </div>\r\n\r\n        <div class=\"results\">\r\n          <button><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${this._data?.result ?? \"\"}\" />          \r\n        </div>\r\n      </form>\r\n    </div>\r\n    `;\n    }\n}\nvar $ef2908d7ab5fa276$export$2e2bcd8739ae039 = new $ef2908d7ab5fa276$var$FindTotal();\n\n\n\nclass $063410248309b238$var$PercentageOfNumber extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".calculators\");\n    calculationType = \"percentageOfNumber\";\n    addHandlerCalculate(handler) {\n        const formContainer = this._parentElement.querySelector(`.calculation-form[data-type^=\"${this.calculationType}\"]`);\n        if (!formContainer) return;\n        const partInput = formContainer.querySelector(\"#percentage\");\n        const percentageInput = formContainer.querySelector(\"#total\");\n        this.validateOnChange(partInput, percentageInput);\n        formContainer.addEventListener(\"submit\", (e)=>{\n            e.preventDefault();\n            handler({\n                percentage: +partInput.value,\n                total: +percentageInput.value\n            }, this);\n        });\n    }\n    _generateMarkup() {\n        return `\r\n    <div class=\"calculation-form\" data-type=${this.calculationType}>\r\n      <form>\r\n\r\n        <div class=\"inputs\">\r\n          <label>What is</label>\r\n          <input type=\"text\" id=\"percentage\" value=\"${this._data?.num1 ?? \"\"}\" required autocomplete=\"off\" />\r\n          <label>% of</label>\r\n          <input type=\"text\" id=\"total\" value=\"${this._data?.num2 ?? \"\"}\" required autocomplete=\"off\" />\r\n          <label>?</label>\r\n        </div>\r\n\r\n        <div class=\"results\">\r\n          <button><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${this._data?.result ?? \"\"}\" />\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n    `;\n    }\n}\nvar $063410248309b238$export$2e2bcd8739ae039 = new $063410248309b238$var$PercentageOfNumber();\n\n\n\nclass $11bf2ba27b1b66ba$var$WhatPercentage extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".calculators\");\n    calculationType = \"whatPercentage\";\n    addHandlerCalculate(handler) {\n        const formContainer = this._parentElement.querySelector(`.calculation-form[data-type^=\"${this.calculationType}\"]`);\n        if (!formContainer) return;\n        const partInput = formContainer.querySelector(\"#part\");\n        const totalInput = formContainer.querySelector(\"#total\");\n        this.validateOnChange(partInput, totalInput);\n        formContainer.addEventListener(\"submit\", (e)=>{\n            e.preventDefault();\n            handler({\n                part: +partInput.value,\n                total: +totalInput.value\n            }, this);\n        });\n    }\n    _generateMarkup() {\n        return `\r\n    <div class=\"calculation-form\" data-type=${this.calculationType}>\r\n      <form>\r\n\r\n        <div class=\"inputs\">\r\n          <input type=\"text\" id=\"part\" value=\"${this._data?.num1 ?? \"\"}\" required autocomplete=\"off\" />\r\n          <label>is what percent of</label>\r\n          <input type=\"text\" id=\"total\" value=\"${this._data?.num2 ?? \"\"}\" required autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <div class=\"results\">          \r\n          <button id=\"calculateBtn\"><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${this._data?.result ?? \"\" ? !isNaN(this._data?.result) ? this._data?.result + \"%\" : this._data?.result : \"\"} \"/>\r\n        </div>\r\n\r\n      </form>    \r\n\r\n    </div>\r\n    `;\n    }\n}\nvar $11bf2ba27b1b66ba$export$2e2bcd8739ae039 = new $11bf2ba27b1b66ba$var$WhatPercentage();\n\n\nconst $f50bd1f2915ed0f2$var$renderCalculators = function() {\n    (0, $063410248309b238$export$2e2bcd8739ae039).render();\n    (0, $11bf2ba27b1b66ba$export$2e2bcd8739ae039).render();\n    (0, $ef2908d7ab5fa276$export$2e2bcd8739ae039).render();\n};\n/**\r\n * @description Calculates the percentage of a number\r\n */ const $f50bd1f2915ed0f2$var$calculatePercentageOfNumber = function({ percentage: percentage, total: total }, caller) {\n    const result = percentage / 100 * total;\n    $f50bd1f2915ed0f2$var$controlResults(percentage, total, result, caller);\n};\n/**\r\n * @description Calculates what percentage a number represents out of total\r\n */ const $f50bd1f2915ed0f2$var$calculateWhatPercentage = function({ part: part, total: total }, caller) {\n    const result = total === 0 ? \"Cannot divide by zero\" : part / total * 100;\n    $f50bd1f2915ed0f2$var$controlResults(part, total, result, caller);\n};\n/**\r\n * @description Calculates what the total is given a part and a percentage\r\n */ const $f50bd1f2915ed0f2$var$calculateFindTotal = function({ part: part, percentage: percentage }, caller) {\n    const result = percentage === 0 ? \"Cannot divide by zero\" : part * 100 / percentage;\n    $f50bd1f2915ed0f2$var$controlResults(part, percentage, result, caller);\n};\nconst $f50bd1f2915ed0f2$var$controlResults = function(num1, num2, result, caller) {\n    if ($f50bd1f2915ed0f2$var$isCalculationDifferent({\n        num1: num1,\n        num2: num2,\n        result: result\n    }, caller.calculationType)) {\n        $0f1d4402dffacf5b$export$4971331372cec95a(num1, num2, caller.calculationType, result);\n        caller.updateUI({\n            num1: num1,\n            num2: num2,\n            result: result\n        });\n    }\n};\nconst $f50bd1f2915ed0f2$var$isCalculationDifferent = function(calculationObj, calculationType) {\n    const newCalcKeys = Object.keys(calculationObj);\n    return newCalcKeys.some((key)=>calculationObj[key] !== $0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations[calculationType][key]);\n};\nconst $f50bd1f2915ed0f2$var$controlStorage = function() {\n    (0, $063410248309b238$export$2e2bcd8739ae039).updateUI($0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations.percentageOfNumber);\n    (0, $11bf2ba27b1b66ba$export$2e2bcd8739ae039).updateUI($0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations.whatPercentage);\n    (0, $ef2908d7ab5fa276$export$2e2bcd8739ae039).updateUI($0f1d4402dffacf5b$export$ca000e230c0caa3e.calculations.findTotal);\n};\nconst $f50bd1f2915ed0f2$var$init = function() {\n    $f50bd1f2915ed0f2$var$renderCalculators();\n    (0, $063410248309b238$export$2e2bcd8739ae039).addHandlerCalculate($f50bd1f2915ed0f2$var$calculatePercentageOfNumber);\n    (0, $11bf2ba27b1b66ba$export$2e2bcd8739ae039).addHandlerCalculate($f50bd1f2915ed0f2$var$calculateWhatPercentage);\n    (0, $ef2908d7ab5fa276$export$2e2bcd8739ae039).addHandlerCalculate($f50bd1f2915ed0f2$var$calculateFindTotal);\n    $f50bd1f2915ed0f2$var$controlStorage();\n};\n$f50bd1f2915ed0f2$var$init();\n\n\n//# sourceMappingURL=index.58dffabb.js.map\n","import * as model from \"./model.js\";\r\nimport findTotal from \"./views/findTotal.js\";\r\nimport percentageOfNumber from \"./views/percentageOfNumber.js\";\r\nimport whatPercentage from \"./views/whatPercentage.js\";\r\n\r\nconst renderCalculators = function () {\r\n  percentageOfNumber.render();\r\n  whatPercentage.render();\r\n  findTotal.render();\r\n};\r\n\r\n/**\r\n * @description Calculates the percentage of a number\r\n */\r\nconst calculatePercentageOfNumber = function ({ percentage, total }, caller) {\r\n  const result = (percentage / 100) * total;\r\n  controlResults(percentage, total, result, caller);\r\n};\r\n\r\n/**\r\n * @description Calculates what percentage a number represents out of total\r\n */\r\nconst calculateWhatPercentage = function ({ part, total }, caller) {\r\n  const result = total === 0 ? \"Cannot divide by zero\" : (part / total) * 100;\r\n  controlResults(part, total, result, caller);\r\n};\r\n\r\n/**\r\n * @description Calculates what the total is given a part and a percentage\r\n */\r\nconst calculateFindTotal = function ({ part, percentage }, caller) {\r\n  const result =\r\n    percentage === 0 ? \"Cannot divide by zero\" : (part * 100) / percentage;\r\n  controlResults(part, percentage, result, caller);\r\n};\r\n\r\nconst controlResults = function (num1, num2, result, caller) {\r\n  if (\r\n    isCalculationDifferent(\r\n      {\r\n        num1,\r\n        num2,\r\n        result,\r\n      },\r\n      caller.calculationType\r\n    )\r\n  ) {\r\n    model.updateState(num1, num2, caller.calculationType, result);\r\n    caller.updateUI({\r\n      num1,\r\n      num2,\r\n      result,\r\n    });\r\n  }\r\n};\r\n\r\nconst isCalculationDifferent = function (calculationObj, calculationType) {\r\n  const newCalcKeys = Object.keys(calculationObj);\r\n  return newCalcKeys.some(\r\n    (key) =>\r\n      calculationObj[key] !== model.state.calculations[calculationType][key]\r\n  );\r\n};\r\n\r\nconst controlStorage = function () {\r\n  percentageOfNumber.updateUI(model.state.calculations.percentageOfNumber);\r\n  whatPercentage.updateUI(model.state.calculations.whatPercentage);\r\n  findTotal.updateUI(model.state.calculations.findTotal);\r\n};\r\n\r\nconst init = function () {\r\n  renderCalculators();\r\n  percentageOfNumber.addHandlerCalculate(calculatePercentageOfNumber);\r\n  whatPercentage.addHandlerCalculate(calculateWhatPercentage);\r\n  findTotal.addHandlerCalculate(calculateFindTotal);\r\n  controlStorage();\r\n};\r\ninit();\r\n","export let state = {};\r\n\r\nexport const initState = function () {\r\n  const storedState = JSON.parse(localStorage.getItem(\"calculations\"));\r\n\r\n  const emptyState = {\r\n    calculations: {\r\n      percentageOfNumber: {\r\n        num1: null,\r\n        num2: null,\r\n        result: null,\r\n      },\r\n      whatPercentage: {\r\n        num1: null,\r\n        num2: null,\r\n        result: null,\r\n      },\r\n      findTotal: {\r\n        num1: null,\r\n        num2: null,\r\n        result: null,\r\n      },\r\n    },\r\n  };\r\n\r\n  return storedState\r\n    ? (state = { calculations: storedState })\r\n    : (state = emptyState);\r\n};\r\ninitState();\r\n\r\nexport const updateState = function (num1, num2, calculationType, result) {\r\n  state.calculations[calculationType] = {\r\n    num1,\r\n    num2,\r\n    result,\r\n  };\r\n  cacheState();\r\n};\r\n\r\nexport const cacheState = function () {\r\n  return localStorage.setItem(\r\n    \"calculations\",\r\n    JSON.stringify(state.calculations)\r\n  );\r\n};\r\n","import View from \"./View.js\";\r\n\r\nclass FindTotal extends View {\r\n  _parentElement = document.querySelector(\".calculators\");\r\n  calculationType = \"findTotal\";\r\n\r\n  addHandlerCalculate(handler) {\r\n    const formContainer = this._parentElement.querySelector(\r\n      `.calculation-form[data-type^=\"${this.calculationType}\"]`\r\n    );\r\n    if (!formContainer) return;\r\n\r\n    const partInput = formContainer.querySelector(\"#part\");\r\n    const percentageInput = formContainer.querySelector(\"#percentage\");\r\n    this.validateOnChange(partInput, percentageInput);\r\n\r\n    formContainer.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      handler(\r\n        { part: +partInput.value, percentage: +percentageInput.value },\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  _generateMarkup() {\r\n    return `\r\n    <div class=\"calculation-form\" data-type=\"${this.calculationType}\">\r\n      <form>\r\n        <div class=\"inputs\">\r\n          <label>If</label>\r\n          <input type=\"text\" id=\"part\" value=\"${\r\n            this._data?.num1 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n          <label>is</label>\r\n          <input type=\"text\" id=\"percentage\" value=\"${\r\n            this._data?.num2 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n          <label>% of the total. The total is:</label>\r\n        </div>\r\n\r\n        <div class=\"results\">\r\n          <button><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${\r\n            this._data?.result ?? \"\"\r\n          }\" />          \r\n        </div>\r\n      </form>\r\n    </div>\r\n    `;\r\n  }\r\n}\r\n\r\nexport default new FindTotal();\r\n","export default class View {\r\n  _data;\r\n\r\n  render(data) {\r\n    const markup = this._generateMarkup(data);\r\n    this._initValidation ? this._initValidation() : null;\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  updateUI(data) {\r\n    if (!data) return;\r\n    // Update the data property in the instance with the new data\r\n    this._data = data;\r\n    // Generate new HTML markup based on the updated data\r\n    const newMarkup = this._generateMarkup();\r\n    /**\r\n     * Create a new Document Fragment from the new HTML markup\r\n     *  createRange(): This is a method of the document object. It creates a new Range object. Ranges are used in the DOM to represent a portion of a document, often used for selecting and manipulating parts of the DOM.\r\n     *  createContextualFragment(newMarkup): This method is called on the Range object. It takes a string of HTML markup (newMarkup) as its argument and creates a new DOM fragment from it.\r\n     *  newMarkup is the HTML markup that you've generated based on your updated data.\r\n     *  createContextualFragment parses this HTML markup and creates a new Document Fragment containing the elements and structure defined in the markup.\r\n     */\r\n    const newDOM = document.createRange().createContextualFragment(newMarkup);\r\n    // Convert the elements within the new DOM fragment into an array\r\n    const newElements = Array.from(\r\n      newDOM\r\n        .querySelector(`.calculation-form[data-type=\"${this.calculationType}\"]`)\r\n        .querySelectorAll(\"*\")\r\n    );\r\n    // Convert the elements within the parent element into an array\r\n    const curElements = Array.from(\r\n      document\r\n        .querySelector(`.calculation-form[data-type=\"${this.calculationType}\"]`)\r\n        .querySelectorAll(\"*\")\r\n    );\r\n    // Iterate through the elements in both the new DOM fragment and the parent element\r\n    newElements.forEach((newEl, i) => {\r\n      const curEl = curElements[i];\r\n      // Check if the new element is different from the current element\r\n      if (!newEl.isEqualNode(curEl)) {\r\n        // Iterate through the attributes of the new element and update the corresponding attributes of the current element\r\n        Array.from(newEl.attributes).forEach((attr) => {\r\n          curEl.setAttribute(attr.name, attr.value);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  validateOnChange(...inputs) {\r\n    inputs.forEach((input) =>\r\n      input.addEventListener(\"input\", () => {\r\n        this.isInvalidValue(input.value)\r\n          ? input.setCustomValidity(\"Insert a valid value\")\r\n          : input.setCustomValidity(\"\");\r\n      })\r\n    );\r\n  }\r\n\r\n  isInvalidValue(value) {\r\n    return !value || isNaN(+value) || +value >= 9999999999999999n;\r\n  }\r\n}\r\n","import View from \"./View.js\";\r\n\r\nclass PercentageOfNumber extends View {\r\n  _parentElement = document.querySelector(\".calculators\");\r\n  calculationType = \"percentageOfNumber\";\r\n\r\n  addHandlerCalculate(handler) {\r\n    const formContainer = this._parentElement.querySelector(\r\n      `.calculation-form[data-type^=\"${this.calculationType}\"]`\r\n    );\r\n    if (!formContainer) return;\r\n\r\n    const partInput = formContainer.querySelector(\"#percentage\");\r\n    const percentageInput = formContainer.querySelector(\"#total\");\r\n    this.validateOnChange(partInput, percentageInput);\r\n\r\n    formContainer.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      handler(\r\n        { percentage: +partInput.value, total: +percentageInput.value },\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  _generateMarkup() {\r\n    return `\r\n    <div class=\"calculation-form\" data-type=${this.calculationType}>\r\n      <form>\r\n\r\n        <div class=\"inputs\">\r\n          <label>What is</label>\r\n          <input type=\"text\" id=\"percentage\" value=\"${\r\n            this._data?.num1 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n          <label>% of</label>\r\n          <input type=\"text\" id=\"total\" value=\"${\r\n            this._data?.num2 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n          <label>?</label>\r\n        </div>\r\n\r\n        <div class=\"results\">\r\n          <button><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${this._data?.result ?? \"\"}\" />\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n    `;\r\n  }\r\n}\r\n\r\nexport default new PercentageOfNumber();\r\n","import View from \"./View.js\";\r\n\r\nclass WhatPercentage extends View {\r\n  _parentElement = document.querySelector(\".calculators\");\r\n  calculationType = \"whatPercentage\";\r\n\r\n  addHandlerCalculate(handler) {\r\n    const formContainer = this._parentElement.querySelector(\r\n      `.calculation-form[data-type^=\"${this.calculationType}\"]`\r\n    );\r\n    if (!formContainer) return;\r\n\r\n    const partInput = formContainer.querySelector(\"#part\");\r\n    const totalInput = formContainer.querySelector(\"#total\");\r\n    this.validateOnChange(partInput, totalInput);\r\n\r\n    formContainer.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      handler({ part: +partInput.value, total: +totalInput.value }, this);\r\n    });\r\n  }\r\n\r\n  _generateMarkup() {\r\n    return `\r\n    <div class=\"calculation-form\" data-type=${this.calculationType}>\r\n      <form>\r\n\r\n        <div class=\"inputs\">\r\n          <input type=\"text\" id=\"part\" value=\"${\r\n            this._data?.num1 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n          <label>is what percent of</label>\r\n          <input type=\"text\" id=\"total\" value=\"${\r\n            this._data?.num2 ?? \"\"\r\n          }\" required autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <div class=\"results\">          \r\n          <button id=\"calculateBtn\"><span>Calculate</span></button>\r\n          <input type=\"text\" readonly value=\"${\r\n            this._data?.result ?? \"\"\r\n              ? !isNaN(this._data?.result)\r\n                ? this._data?.result + \"%\"\r\n                : this._data?.result\r\n              : \"\"\r\n          } \"/>\r\n        </div>\r\n\r\n      </form>    \r\n\r\n    </div>\r\n    `;\r\n  }\r\n}\r\n\r\nexport default new WhatPercentage();\r\n"],"names":["$0f1d4402dffacf5b$export$ca000e230c0caa3e","$0f1d4402dffacf5b$export$f6196a6c6bb539b4","storedState","JSON","parse","localStorage","getItem","calculations","percentageOfNumber","num1","num2","result","whatPercentage","findTotal","$0f1d4402dffacf5b$export$4971331372cec95a","calculationType","$0f1d4402dffacf5b$export$13d81116e45f7d80","setItem","stringify","$3a07c34e115c11c9$export$2e2bcd8739ae039","_data","render","data","markup","_generateMarkup","_initValidation","_parentElement","insertAdjacentHTML","updateUI","newMarkup","newDOM","document","createRange","createContextualFragment","newElements","Array","from","querySelector","querySelectorAll","curElements","forEach","newEl","i","curEl","isEqualNode","attributes","attr","setAttribute","name","value","validateOnChange","inputs","input","addEventListener","isInvalidValue","setCustomValidity","isNaN","$ef2908d7ab5fa276$var$FindTotal","addHandlerCalculate","handler","formContainer","partInput","percentageInput","e","preventDefault","part","percentage","$ef2908d7ab5fa276$export$2e2bcd8739ae039","$063410248309b238$var$PercentageOfNumber","total","$063410248309b238$export$2e2bcd8739ae039","$11bf2ba27b1b66ba$var$WhatPercentage","totalInput","$11bf2ba27b1b66ba$export$2e2bcd8739ae039","$f50bd1f2915ed0f2$var$controlResults","caller","$f50bd1f2915ed0f2$var$isCalculationDifferent","calculationObj","newCalcKeys","Object","keys","some","key"],"version":3,"file":"index.58dffabb.js.map"}